//
//  SubscriptionManager.swift
//  InvoicerApp
//
//  Created by Danyil Skrypnichenko on 9/30/25.
//

import Foundation
import RevenueCat
import StoreKit

@MainActor
final class SubscriptionManager: NSObject, ObservableObject {
    static let shared = SubscriptionManager()

    // MARK: - Published Properties
    @Published private(set) var isPro: Bool = false
    @Published private(set) var isLoading: Bool = false
    @Published private(set) var errorMessage: String?
    @Published private(set) var offerings: Offerings?
    @Published private(set) var customerInfo: CustomerInfo?
    
    // MARK: - Private Properties
    private let entitlementID = "Invoice Maker: Pro - Premium Subscription"
    private let offeringID = "default"
    
    // MARK: - Initialization
    override init() {
        super.init()
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å iCloud –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
        isPro = CloudSync.shared.bool(.isProSubscriber)
    }

    // MARK: - Public Methods
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    func checkSubscriptionStatus() async {
        isLoading = true
        errorMessage = nil
        
        do {
            let customerInfo = try await Purchases.shared.customerInfo()
            print("‚úÖ Customer Info loaded for user: \(customerInfo.originalAppUserId)")
            print("‚úÖ Active entitlements: \(customerInfo.entitlements.active.keys)")
            updateSubscriptionStatus(from: customerInfo)
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: \(error.localizedDescription)"
            print("‚ùå RevenueCat error: \(error)")
        }
        
        isLoading = false
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    func loadOfferings() async {
        do {
            let offerings = try await Purchases.shared.offerings()
            self.offerings = offerings
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: \(error.localizedDescription)"
            print("‚ùå RevenueCat offerings error: \(error)")
        }
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π)
    func ensureUserAuthenticated() async {
        do {
            let customerInfo = try await Purchases.shared.customerInfo()
            if customerInfo.originalAppUserId == "$RCAnonymousID" {
                print("üîç User is anonymous, attempting to authenticate...")
                // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                _ = try await Purchases.shared.restorePurchases()
                print("‚úÖ Authentication attempt completed")
            } else {
                print("‚úÖ User is already authenticated: \(customerInfo.originalAppUserId)")
            }
        } catch {
            print("‚ùå Authentication error: \(error)")
        }
    }
    
    /// –ü–æ–∫—É–ø–∞–µ—Ç –ø–∞–∫–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    func purchase(package: Package) async throws {
        isLoading = true
        errorMessage = nil
        
        do {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å StoreKit
            print("üîç Checking StoreKit status...")
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            await ensureUserAuthenticated()
            
            let currentCustomerInfo = try await Purchases.shared.customerInfo()
            print("‚úÖ Current user: \(currentCustomerInfo.originalAppUserId)")
            print("‚úÖ User is anonymous: \(currentCustomerInfo.originalAppUserId == "$RCAnonymousID")")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞
            print("üîç Product ID: \(package.storeProduct.productIdentifier)")
            print("üîç Product price: \(package.storeProduct.localizedPriceString)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ StoreKit
            if #available(iOS 15.0, *) {
                _ = StoreKit.Transaction.currentEntitlements
                print("üîç StoreKit entitlements available")
            }
            
            print("üõí Starting purchase...")
            let (transaction, purchaseCustomerInfo, userCancelled) = try await Purchases.shared.purchase(package: package)
            
            print("üõí Purchase completed:")
            print("   - Transaction: \(transaction?.description ?? "nil")")
            print("   - User cancelled: \(userCancelled)")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            updateSubscriptionStatus(from: purchaseCustomerInfo)
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                Task {
                    await self.checkSubscriptionStatus()
                }
            }
        } catch {
            isLoading = false
            if let rcError = error as? RevenueCat.ErrorCode {
                switch rcError {
                case .purchaseCancelledError:
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∫—É–ø–∫—É - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    return
                case .storeProblemError:
                    errorMessage = "–ü—Ä–æ–±–ª–µ–º–∞ —Å App Store. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                case .purchaseNotAllowedError:
                    errorMessage = "–ü–æ–∫—É–ø–∫–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."
                case .purchaseInvalidError:
                    errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞."
                case .productNotAvailableForPurchaseError:
                    errorMessage = "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
                case .productAlreadyPurchasedError:
                    errorMessage = "–ü—Ä–æ–¥—É–∫—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω."
                case .receiptAlreadyInUseError:
                    errorMessage = "–ß–µ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."
                case .invalidReceiptError:
                    errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–∫."
                case .missingReceiptFileError:
                    errorMessage = "–§–∞–π–ª —á–µ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                case .networkError:
                    errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
                case .invalidCredentialsError:
                    errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
                case .unexpectedBackendResponseError:
                    errorMessage = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
                case .receiptInUseByOtherSubscriberError:
                    errorMessage = "–ß–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º."
                case .invalidAppUserIdError:
                    errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                case .unknownBackendError:
                    errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."
                case .invalidSubscriberAttributesError:
                    errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞."
                case .ineligibleError:
                    errorMessage = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
                case .insufficientPermissionsError:
                    errorMessage = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."
                case .paymentPendingError:
                    errorMessage = "–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞."
                case .logOutAnonymousUserError:
                    errorMessage = "–ù–µ–ª—å–∑—è –≤—ã–π—Ç–∏ –∏–∑ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
                case .customerInfoError:
                    errorMessage = "–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ."
                case .systemInfoError:
                    errorMessage = "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                case .beginRefundRequestError:
                    errorMessage = "–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞."
                case .apiEndpointBlockedError:
                    errorMessage = "API endpoint –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                case .invalidAppleSubscriptionKeyError:
                    errorMessage = "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ Apple."
                case .unsupportedError:
                    errorMessage = "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è."
                case .productDiscountMissingIdentifierError:
                    errorMessage = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."
                case .productDiscountMissingSubscriptionGroupIdentifierError:
                    errorMessage = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."
                default:
                    errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: \(rcError.localizedDescription)"
                }
            } else {
                errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: \(error.localizedDescription)"
            }
            throw error
        }
        
        isLoading = false
    }
    
    /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏
    func restorePurchases() async throws {
        isLoading = true
        errorMessage = nil
        
        do {
            let customerInfo = try await Purchases.shared.restorePurchases()
            updateSubscriptionStatus(from: customerInfo)
        } catch {
            isLoading = false
            errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫: \(error.localizedDescription)"
            throw error
        }
        
        isLoading = false
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–∞–∫–µ—Ç –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    func getPackage(identifier: String) -> Package? {
        return offerings?.offering(identifier: offeringID)?.package(identifier: identifier)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    func getAvailablePackages() -> [Package] {
        return offerings?.offering(identifier: offeringID)?.availablePackages ?? []
    }
    
    // MARK: - Private Methods
    
    private func updateSubscriptionStatus(from customerInfo: CustomerInfo) {
        self.customerInfo = customerInfo
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ entitlement "pro"
        let hasProAccess = customerInfo.entitlements[entitlementID]?.isActive == true
        let previousStatus = isPro
        isPro = hasProAccess
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å iCloud
        CloudSync.shared.set(isPro, for: .isProSubscriber)
        
        print("‚úÖ Subscription status updated: isPro = \(isPro)")
        print("‚úÖ Previous status: \(previousStatus), New status: \(isPro)")
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ entitlement
        if let proEntitlement = customerInfo.entitlements[entitlementID] {
            print("‚úÖ Pro entitlement details:")
            print("   - Is active: \(proEntitlement.isActive)")
            print("   - Will renew: \(proEntitlement.willRenew)")
            print("   - Period type: \(proEntitlement.periodType)")
            print("   - Expires date: \(proEntitlement.expirationDate?.description ?? "Never")")
        } else {
            print("‚ùå Pro entitlement not found in customer info")
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ entitlements
        print("‚úÖ All active entitlements: \(customerInfo.entitlements.active.keys)")
        print("‚úÖ All entitlements (active + inactive): \(customerInfo.entitlements.all.keys)")
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Å–µ—Ö entitlements
        for (key, entitlement) in customerInfo.entitlements.all {
            print("‚úÖ Entitlement '\(key)': isActive=\(entitlement.isActive), willRenew=\(entitlement.willRenew)")
        }
    }
}

// MARK: - PurchasesDelegate
extension SubscriptionManager: PurchasesDelegate {
    nonisolated func purchases(_ purchases: Purchases, receivedUpdated customerInfo: CustomerInfo) {
        Task { @MainActor in
            updateSubscriptionStatus(from: customerInfo)
        }
    }
}
